Le 08/10/2020

 Révision de l'algorithm de la fonction cash:

I/ Observation + remarque du phénomène:

1= null
2= {tow:1 , five:0 , ten:0 }
3= null
4= {tow:2 , five:0 , ten: 0}
5= {tow:0 , five:1 , ten:0 }
6= {tow:3 , five:0 , ten:0 }
7= {tow:2 , five:1 , ten:0 }
8= {tow:4 , five:0 , ten:0 }
9= {tow:2 , five:1 , ten:0 }
10= {tow:0 , five:0 , ten:1 }
11= {tow:3 , five:1 , ten:0 }
12= {tow:1 , five:1 , ten:1 }
13= {tow:4 , five:1 , ten:0 }
14= {tow:2 , five:0 , ten:1 }
15= {tow:0 , five:1 , ten:1 }
16= {tow:3 , five:0 , ten:1 }
17= {tow:1 , five:1 , ten:1 }
18= {tow:4 , five:0 , ten:1 }
19= {tow:2 , five:1 , ten:1 }
20= {tow:0 , five:0 , ten:2 }
21= {tow:3 , five:1 , ten:1 }
22= {tow:1 , five:1 , ten:2 }
23= {tow:4 , five:1 , ten:1 }
24= {tow:2 , five:0 , ten:2 }
25= {tow:0 , five:1 , ten:2 }
26= {tow:3 , five:0 , ten:2 }
27= {tow:1 , five:1 , ten:2 }
28= {tow:4 , five:0 , ten:2 }
29= {tow:2 , five:1 , ten:2 }
30= {tow:0 , five:0 , ten:3 }
31= {tow:3 , five:1 , ten:2 }
32= {tow:1 , five:1 , ten:3 }
33= {tow:4 , five:1 , ten:2 }
34= {tow:2 , five:0 , ten:3 }
35= {tow:0 , five:1 , ten:3 }
36= {tow:3 , five:0 , ten:3 }
37= {tow:1 , five:1 , ten:3 }
38= {tow:4 , five:0 , ten:3 }
39= {tow:2 , five:1 , ten:3 }
40= {tow:0 , five:0 , ten:4 }


Donc: 

1) remarque 01: à partir du cash 20, le reste suit le meme algorithm que celui du cash entre 11 et 19

2) remarque 02: les cash paires ont le meme algorithme

3) remarque 03: les cashs dont leurs restes de division par 5 est égéle à un ou bien est égale à 3, ont le meme algorithme

4) remarque 04: si le cash ou bien le reste du cash resultat de la remarque 01 est impaire ou bien son reste de la division par 5 ni égale à 1 ni à 3, il suit un autre algorithme

II/: conclusion + script en javascript:
Nous avons 05 cas : 

1-cas 01: si le cash = 1 ou bien = 3: le résultat est null
2-cas 02: si le cash est suppérieur à 20: on enlève tous ce qui est supérieur à 20 en le rendant comme billets de 10, et on va travailler sur le reste qui serait à nouveau notre cash
* ten = ((cash/10)-1 )
* cash = (cash %10)+10

3- cas 03: si le reste du résultat précédant est un nombre paire(cash % 2 == 0) nous avons deux cas:
* on rend les billets de 10: le nombre des billets précédant + le nombre actuelle, et le reste en pièces de 2 


4- cas 04: si lorsequ on enlève les billets de 5, le reste =1(cash %5 = 1)  ou bien = 3(cash %5 = 3): dans ce cas on ne donne pas des billets de 10, seulement des billets de 5 et le reste en pièces de 2:

five = 1     
two = (cash-5)/2

5- cas 05: si le reste est inférieur à 20 et n'est pas un nombre paire et le reste de sa division par 5 ni 1 ni 3, donc:
* le nombre de billets de 10 = le cash divisé par 10
* le nombre de billets de 5 = le reste de (la division du cash par 10) divisé par 5
*le nombre de pièces de 2: le rest de (la division du cash par 5) divisé par 2

III/ script:

function change(cash){
	var two = 0;
	var five = 0;
	var ten = 0;
	if (cash ==1 || cash == 3){return null}

	if (cash >=20){
	ten = Math.floor((cash / 10) - 1)
	cash = (cash % 10) + 10	
}
	if (cash % 2 == 0){
        ten += Math.floor(cash / 10)
        two =Math.floor((cash % 10) / 2)
}

	else if((cash % 5) ==1||(cash % 5) ==3 ){
		
        	five = 1
        	two = Math.floor((cash - 5) / 2)
}
	else{
        ten += Math.floor(cash / 10)
        five = Math.floor((cash % 10) / 5)
        two = Math.floor((cash % 5) / 2)
}
	return {'two': two,'five': five,'ten': ten}
}


IV/ exemple + cas appliquée

1) cash = 17 --> cas 05--> {ten:1, five:1, two: 1}  
2)cash = 49 --> cas 02 puis cas 05 --> {ten:4, five:1, two: 2}
3)cash = 1 --> cas 01 --> null
4) cash = 21 --> cas 02 puis cas 04 --> {ten:1, five:1, two: 3}






